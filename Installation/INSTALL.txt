################################################################################
#################### Installation of the DADA2 nifH pipeline ###################
################################################################################

The DADA2 nifH pipeline uses a bunch of external tools (e.g. R, DADA2,
cutadapt).  To get them we will use miniconda3, a software package and
environment manager.  This document describes how to get miniconda3 and then use
it to create an "environment" that you will use whenever running the DADA2
pipeline.

These instructions are for installing tools on thalassa (linux machine).  The
overall process will be similar if you want to set up to run on your laptop.
Feel free to ask Jonathan for help.

Overview:
  0. Get the pipeline and all documentation (in a tgz file).
  1. Install Miniconda3.
  2. Create the DADA2_nifH environment. This step downloads external tools and
     includes them in a new environment for running the pipeline.
  3. Install the DADA2 R package, and two others.
  4. Add the pipeline scripts to your path.
  -- Installation completed! --
  5. Try the example

Below '%' is the unix shell prompt. Your's might differ.  The instructions are
the same whether you are using bash or tcsh shell (with exceptions noted).


--------------------------------------------------------------------------------
# 0. Get the DADA2 nifH pipeline, documents, etc.
--------------------------------------------------------------------------------

** First time install **

The file you are now reading is included in the DADA2 nifH package so you
probably already did this step.  If not, then do the following (for whichever
DATESTAMP you like):

  % cd ~
  % tar tvfz /home/jmagasin/ToolsShared/NifH_amplicons/DADA2/Shared/DADA2_nifH_pipeline.DATESTAMP.tgz
  % tar xvfz /home/jmagasin/ToolsShared/NifH_amplicons/DADA2/Shared/DADA2_nifH_pipeline.DATESTAMP.tgz

The first tar command lists (t) the contents of the tgz.  You should see that
all files are within directory DADA2_nifH_pipeline.  The second tar command
extracts (x) a local copy of the copy of the tools in your home directory under
DADA2_nifH_pipeline.  This directory is only for the tools, **not your
analyses**.


** Upgrading **

Upgrading the pipeline will usually entail getting new versions of my scripts
and documentation but not external packages.  Essentially, you just need to do
the tar commands above. They will overwrite the old pipeline, so you should
first verify the the new:

  % cd ~
  % mv DADA2_nifH_pipeline DADA2_nifH_pipeline.OLD
  % tar tvfz /home/jmagasin/ToolsShared/NifH_amplicons/DADA2/Shared/DADA2_nifH_pipeline.NEWDATESTAMP.tgz
  % tar xvfz /home/jmagasin/ToolsShared/NifH_amplicons/DADA2/Shared/DADA2_nifH_pipeline.NEWDATESTAMP.tgz
  % which run_DADA2_pipeline.sh
  % run_DADA2_pipeline.sh params.example.csv --help

The 'which' command should show that the main script can be found by your shell,
because you added DADA2_nifH_pipeline to your path when you first installed
(step #4.)  You can re-run the Example too if you like.  Then you can delete the
DADA2_nifH_pipeline.OLD directory.

From time to time, upgrading will require new(er) conda or R packages (in
particular DADA2).  I will provide instructions as needed.


--------------------------------------------------------------------------------
# 1. Install Miniconda3
--------------------------------------------------------------------------------

We will use a bash shell to install Miniconda3 because I have run into some
problems installing from tcsh, the default shell on thalassa. Start a bash
shell as follows:

  % bash

The prompt might change from '%' but I will continue to use '%' in the
instructions below.  You can verify that you are in bash with the command
"echo $0".  Later you can use the "exit" command to exit the bash shell
and return to tcsh.

Now that you are in bahs, go to your home directory and create a temporary
directory for installing miniconda3.

  % cd ~
  % mkdir Miniconda3Install
  % cd Miniconda3Install

The instructions below are all executed within Miniconda3Install.


For background, check out the Miniconda3 installation guide (but below are the
few, slightly modified steps you need for installing):
    https://conda.io/projects/conda/en/latest/user-guide/install/index.html
For thalassa we want to do 64-bit linux installation:
    https://docs.conda.io/projects/conda/en/latest/user-guide/install/linux.html
We will download an older version of the Miniconda3 installer (from 2020-12-21)
and then update to the latest Miniconda3.
   Why this hassle?  Thalassa has an older version of glibc (2.12) that will
   make installation of recent Miniconda3s fail. We workaround this by
   installing an older Miniconda3 and then using Miniconda3 itself to update
   Miniconda3 and to get a recent glibc (your own local copy).

  % wget https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh
  % md5sum Miniconda3-py39_4.9.2-Linux-x86_64.sh

You should see the same md5 checksum for the installer:
  b4e46fcc8029e2cfa731b788f25b1d36
that appears on the bottom of the web page https://repo.anaconda.com/miniconda/
If you do not then the installer has been compromised or corrupted and you
should not use it. Let me know!


Now install Miniconda3. Even though you are already in a bash shell,
explicitly run the script with bash as shown:

  % bash Miniconda3-py39_4.9.2-Linux-x86_64.sh -b -p $HOME/miniconda3

The installer will identify all the packages it installs and complete with
"installation finished" after ~10 sec.  If you do not see that, something is
wrong -- please let me know.

Otherwise do the following two commands. The first starts conda (and the prompt
will change to include "(base)".  The second initializes conda so that whenever
you start a bash shell 'conda' will be in your path and the base environment
will be activated.  (Newer installers automate these two steps.)

  % source $HOME/miniconda3/bin/activate
  (base) % conda init

You can also verify that you just installed conda 4.9.2:

  (base) % conda -V

Now we update to the latest version of conda.

  (base) % conda update -n base -c defaults conda

You will be shown a list of packages that will be updated and asked if you want
to proceed.  The installation takes ~10 sec.  You can verify that your conda
version is now 4.10.3 or later with "conda -V".

The 'conda' command will now work whenever you are in a bash shell.  If you want
conda also to work in tcsh (the default shell for thalassa), then you should add
a line to your tcsh initialization file (.tcshrc). Do the following so that
conda initialization will be done automatically whenever you start a new tcsh
shell.  (You can do this while still in the bash shell you started way above. Or
you can first "exit" the bash shell which will return you to the tcsh shell.)

  % cd ~
  % cp .tcshrc .tcshrc.OLD
  % echo "source $HOME/miniconda3/etc/profile.d/conda.csh" >> .tcshrc

Let's verify that conda works for tcsh. Log off of thalassa, then ssh back in.
You are now in a tcsh shell. Try the following.

  % which conda
  % conda -V
  % conda --help

If everything above went well, you are free to delete the Miniconda3Install
directory (and .tcshrc.OLD).

  % cd ~
  % rm Miniconda3Install/Miniconda3-py39_4.9.2-Linux-x86_64.sh
  % rmdir Miniconda3Install

The remaining sections can be done from tcsh or bash (with some caveats in
section #4).


--------------------------------------------------------------------------------
# 2. Create the DADA2_nifH environment
--------------------------------------------------------------------------------

Create a conda environment called "DADA2_nifH" that includes nearly everything
needed to run the DADA2 nifH pipeline. This step will take awhile (~10 min):

  % conda env create -n DADA2_nifH --file ~/DADA2_nifH_pipeline/Installation/environment_DADA2_nifH.yml

Installation 98% complete!  Let's verify the conda DADA2_nifH environment.
First, activate it:

  % conda activate DADA2_nifH

Activating an environment changes the prompt to be prefixed by the environment
name (possibly split over two lines):

  (DADA2_nifH) %

Check that several tools required by the DADA2 nifH pipeline are now
installed. (Example output shown for user "you".)

  (DADA2_nifH) % which R
  /home/you/miniconda3/envs/DADA2_nifH/bin/R
  (DADA2_nifH) % R --version
  R version 4.1.1 (2021-08-10) -- "Kick Things"
  ...
  (DADA2_nifH) % which cutadapt
  /home/you/miniconda3/envs/DADA2_nifH/bin/cutadapt
  (DADA2_nifH) % which hmmalign
  /home/you/miniconda3/envs/DADA2_nifH/bin/hmmalign

Later, you can deactivate the environment with:

  (DADA2_nifH) % conda deactivate

after which the 'which' commands above will report errors or will find the
default versions of the tools on thalassa (e.g. /usr/bin/R which is v3.5.2, not
R v4.1 within the DADA2_nifH environment).

Whenever you want to use the DADA2 nifH pipeline, you must first activate
the DADA2_nifH environment.


--------------------------------------------------------------------------------
# 3. Install the DADA2 R package and a few others
--------------------------------------------------------------------------------

This step installs DADA2, vegan (with tons of support for ecological stats), abd
ggrepel (minor ggplot addition for non-overlapping labels in plots).


*** DADA2 R pacakge install ***

We will use Bioconductor (an R package) to install DADA2 as described at:
    https://bioconductor.org/packages/release/bioc/html/dada2.html
In the shell, with DADA2_nifH active, start R:

  (DADA2_nifH) % R

and in the R console paste the following lines:

   ## Install Bioconductor if necessary.  It takes just a few seconds.
   ## When asked which CRAN mirror to use, "0-Cloud [https]" is good, which
   ## is probably choice "1".
   if (!requireNamespace("BiocManager", quietly = TRUE))
       install.packages("BiocManager")

   ## Now use Bioconductor to install the latest dada2.  This takes a long time.
   ## Check in periodically because at some point you will be asked if you want
   ## to update all/some/none of several mysteriously named packages.  Choose
   ## all.
   BiocManager::install("dada2")

The install takes around 30 min on thalassa because DADA2 uses many additional
packages that must be downloaded and compiled.  At the end of a successful
install, you should see a few messages about tests that worked. Additionally you
can verify that dada2 is now installed by loading it (and then you can exit R).

    library(dada2) # Better work!
    quit()         # Hit 'n' when it asks if you want to save.


Notes:
  1. The DADA2 R package will be available only when DADA2_nifH is active.
     (miniconda3 does not manage the R packages. However, the R package files
     are stored alongside the R that installed them, in this case
       ~/miniconda3/envs/DADA2_nifH/lib/R/library/dada2
     Keep this in mind when installing other R packages while using conda.)

  2. Step #2 above installed R v4.1 (specified in the .yml file) because that
     version is required for DADA2 v3.13, which was the most recent DADA2 on
     Aug. 12, 2021.  At some point, a new version of DADA2 might require a newer
     version of R and I will have to change the .yml file.  If step #3 fails,
     then perhaps we are at that poin!

  3. There is a way to install DADA2 using conda (rather than Bioconductor),
     however it seems broken as of Aug. 12, 2021.


*** Install vegan and ggrepel ***

While DADA2_nifH is the active environment, launch R.  Then do a CRAN install of
vegan and ggrepel (since neither is in Bioconductor):

    install.packages('vegan')   # You can choose the "0-Cloud" mirror again.
                                # The install will take ~1 min.
    install.packages('ggrepel') # This install takes ~10 sec.

    quit()  # Hit 'n' when it asks if you want to save.

You should now have all the required external software for running the DADA2
nifH pipeline.


--------------------------------------------------------------------------------
# 4. Add the pipeline scripts to your path
--------------------------------------------------------------------------------

Short version (if you are very comfortable with unix shells):

Modify your path to include these two components:
  ~/DADA2_nifH_pipeline
  ~/DADA2_nifH_pipeline/scripts
The first will enable run_DADA2_pipeline.sh to be found. The second is mainly
for organizeFastqs.R.


Longer version with a little unix shell background:

When you login to thalassa, your shell will be initialized by running a few
scripts that set up various preferences, including your 'path'.  When you type a
command, the shell uses the path to locate the program that runs the command.
This saves you much typing, e.g. you can simply run "R" rather than "/usr/bin/R"
(and you don't have to remember where R is).  When you activate the DADA2_nifH
environment, miniconda3 temporarily modifies your path to find the needed tools,
which are often specific versions such as R v4.1 mentioned above.

The scripts that comprise the DADA2 nifH pipeline are not in a conda package.
So we have to modify the path ourselves.  For convenience we will modify the
shell initialization script so that every time you login to thalassa the DADA2
pipeline scripts will be added to your path.

Note that:
  1. This section assumes you installed the pipeline in ~/DADA2_nifH_pipeline as
     described in step #0.  If you installed elsewhere, just adjust path
     components accordingly.
  2. The commands below assume DADA2_nifH is active. It is fine if DADA2_nifH is
     not active.

First, determine if your shell is bash or tcsh because they have slightly
different syntaxes and initialization scripts.

  (DADA2_nifH) % echo $0

If bash, then do this.  Be *very* careful to use the *double* angle brackets >>
so that the path setting command is *appended* to .bashrc.  [First we will make
a backup of .bashrc just in case.] Also be careful that you type everything
exactly as shown in this ASCII text document.  Cut-and-paste from an email or
Word document could change the quotes.  The 'tail' command just shows that the
path setting command was appended to .bashrc.

  (DADA2_nifH) % cp ~/.bashrc ~/.bashrc.OLD
  (DADA2_nifH) % echo 'export PATH=$PATH:~/DADA2_nifH_pipeline:~/DADA2_nifH_pipeline/scripts' >> ~/.bashrc
  (DADA2_nifH) % tail ~/.bashrc

If tcsh, do this. The same cautions mentioned above apply.

  (DADA2_nifH) % cp ~/.tcshrc ~/.tcshrc.OLD
  (DADA2_nifH) % echo 'set path=($path $HOME/DADA2_nifH_pipeline $HOME/DADA2_nifH_pipeline/scripts)' >> ~/.tcshrc
  (DADA2_nifH) % tail ~/.tcshrc

The path modifications will only become active when you next login (ssh) to
thalassa.  Log off (deactivate DADA2_nifH if necessary, then 'exit' or
'logout'), then ssh back into thalassa.

Now verify that the shell can find these two main pipeline scripts:

  % which run_DADA2_pipeline.sh
  /home/you/DADA2_nifH_pipeline/run_DADA2_pipeline.sh
  % run_DADA2_pipeline.sh --help
  % which organizeFastqs.R
  /home/you/DADA2_nifH_pipeline/scripts/organizeFastqs.R

Although the shell can find the scripts, of course you have to first activate
DADA2_nifH for them to work.  (--help will work though).

  % conda activate DADA2_nifH

That's it!  You should now be able to run the pipeline on a small example.


--------------------------------------------------------------------------------
# 5. Try the mini Arctic 2017 example
--------------------------------------------------------------------------------

Please see the example:

  % cd ~/DADA2_nifH_pipeline/Example

You can probably begin at step 2.


-- END --
